"""Command-line interface for the program."""

from argparse import ArgumentParser, Namespace, RawTextHelpFormatter

from rich import print

from xdg_ninja_report.consts import __version__ as VERSION

parser: ArgumentParser


def get_parsed_args() -> Namespace:
    """
    Parse and return command-line arguments.

    Returns:
        The parsed arguments as an argparse.Namespace object.
    """
    global parser

    parser = ArgumentParser(
        description="Check for dotfiles in the $HOME directory that are not reported by xdg-ninja",  # Program description
        formatter_class=RawTextHelpFormatter,  # Disable line wrapping
        allow_abbrev=False,  # Disable abbreviations
        add_help=False,  # Disable default help
    )

    g_targets = parser.add_argument_group("Options to process dotfiles")
    g_targets.add_argument(
        "-rf",
        "--report_file",
        default=None,
        metavar="report_file.txt",
        help="File with the xdg-ninja output. Can be generated by `xdg-ninja > report_file.txt`",
    )

    g_misc = parser.add_argument_group("Miscellaneous Options")
    # Help
    g_misc.add_argument(
        "-h", "--help", action="help", help="Show this help message and exit."
    )
    # Debug
    g_misc.add_argument(
        "-d",
        "--debug",
        dest="debug",
        action="store_true",
        default=False,
        help="Activate debug logs. Default is False.",
    )
    g_misc.add_argument(
        "-V",
        "--version",
        action="version",
        help="Show version number and exit.",
        version=f"%(prog)s version {VERSION}",
    )

    return parser.parse_args()


def parser_error(err_msg: str) -> None:
    """
    Print the error message and the help message and exit.

    Args:
        err_msg (str): The error message to print.

    Returns:
        None
    """
    global parser

    print(f"[red]ERROR[/]: {err_msg}\n")
    parser.print_help()
